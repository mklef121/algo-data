package main

import (
	"fmt"
	"os"
	"runtime"
	"strconv"
	"sync"
	"time"
)

//The Client structure is used for keeping track of the requests that the program is going to process
type Client struct {
	id      int
	integer int
}

//The Result structure is used for keeping the data of each Client as well as the results generated by the client.
type Result struct {
	job    Client
	square int
}

//the Client structure holds the input data of each request, whereas Result holds the results of a request

var size = runtime.GOMAXPROCS(0)
var clients = make(chan Client, size)
var data = make(chan Result, size)

func main() {
	if len(os.Args) != 3 {
		fmt.Println("Need #jobs and #workers!")
		return
	}
	nJobs, err := strconv.Atoi(os.Args[1])
	if err != nil {
		fmt.Println(err)
		return
	}

	nWorkers, err := strconv.Atoi(os.Args[2])
	if err != nil {
		fmt.Println(err)
		return
	}

	//The create() call mimics the client requests that you are going to process.
	go create(nJobs)

	// The finished channel is used for blocking the program
	finished := make(chan interface{})

	//The main process is listening to messages on the `data channel` which will be published
	// By the worker goroutine
	go func() {
		for d := range data {
			fmt.Printf("Client ID: %d\tint: ", d.job.id)
			fmt.Printf("%d\tsquare: %d\n", d.job.integer, d.square)
		}
		//The finished <- true statement is used for unblocking the program as soon as the for range loop ends.
		finished <- true
	}()

	var wg sync.WaitGroup
	for i := 0; i < nWorkers; i++ {
		wg.Add(1)
		//This listens to messages published on the client channel and does it's calculation before sending
		// Processed data to the main thread
		go worker(&wg, i)
	}
	wg.Wait()
	fmt.Println("I am waiting here")
	close(data)

	fmt.Printf("Finished: %v\n", <-finished)

}

// The worker() function processes requests by reading the clients channel.
// Once the processing is complete, the result is written to the data channel.
func worker(wg *sync.WaitGroup, num int) {
	for c := range clients {
		square := c.integer * c.integer
		output := Result{c, square}
		fmt.Println("Processed by worker :", num)
		data <- output
		time.Sleep(time.Second)
	}
	// fmt.Println("Worked :", num, " Has seen no more jobs in the queue")
	wg.Done()
}

//The purpose of the create() function is to create all requests properly and
// then send them to the clients buffered channel for processing.
func create(n int) {
	//create each channel and write data to it
	for i := 0; i < n; i++ {
		c := Client{i, i}
		clients <- c
	}
	close(clients)
}
